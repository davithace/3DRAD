<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>

<head>
   <title>
      NVIDIA® PhysX™ based cars for 3D Rad
   </title>

   <META
      content="PhysX,Car,Cars,3D Rad"
      name="keywords">
</head>

<body bgcolor="#000000" text="#909080" link="#F0E0E0" vlink="#F0E0E0" alink="#F0E0E0">

<table border="0" cellpadding="0" cellspacing="0" width="860">

   <tr>
      <td width="860" colspan="6"><img src="./img/main_logo.jpg" width="760" height="182"></td>
   </tr>

   <tr>
      <td width="26" bgcolor="#00002F"></td>
      <td width="112" bgcolor="#00002F" valign="top">
         <br>
         <p>
            <a href="http://www.3drad.com/">
            <font color="#909080" size="1" face="Verdana">
               <strong>WHAT IS<br>3D RAD?<br>CLICK HERE<br>TO FIND OUT!</strong>
            </font>
            </a>
         </p>
         <br>
      </td>
      <td width="24" bgcolor="#00002F"></td>
      <td width="24"></td>
      <td width="500">
         <h1 align="center">
            <font size="4" face="Verdana">
               PCar
            </font>
         </h1>
         <div align="justify"> 
         <font size="2" face="Verdana">
         <p>
            <center>
            <img src="./img/PCar.jpg" width="128" height="128" align="center" border="0">
            </center>
            <br>
            PCar is a powerful, ready-to-use vehicle you can use in your 3D Rad projects.
            Physics is entirely based on the NVIDIA® PhysX™ vehicle simulation.
            <br><br>
            PCar basic usage is similar to that of the legacy <a href="./Car.htm">Car</a> object,
            but the internal functionality has been rewritten to fully and closely support the
            simulation features provided by the NVIDIA® PhysX™ libraries.
            <br><br>
            The property dialog for the PCar object allows you to configure car physics parameters like
            maximum wheel axle torque, suspension spring/damping, etc, and even specify longitudal and
            lateral tire force functions independently, to accurately simulate specific tire designs.
            <br><br>
            Even more powerful functionality is provided through internal PCar object parameters that
            can be altered run-time by using scripting or other 3D Rad objects.
            <br><br>
            Additional parameters are also provided in a car-model-specific .ini file, which defines the basic
            parameters, like car-body and wheel masses, that differentiate each vehcle type that you can find
            in the included car layout library.
            <br><br>
            <center>
            <img src="./img/PCar_properties.jpg">
            </center>
            <br><br>
            <center><strong>Wheel offsets and scale</strong></center>
            <br>
            All cars in the library (see <em>Change</em>, below) have default wheel locations and size.
            You can alter these by specifying X, Y, Z offsets in meters and a scaling factor (1.0 means original size).
            <br><br>
            Keep in mind that the wheel location, specified as above, is actually the position of the wheel when the suspension is fully
            compressed.
            <br><br>
            This means that the actual wheel position, both in the editor window and run-time, will also depend
            on the <em>Suspension travel</em> parameter (see below).
            <br><br>
            <center><strong>Change</strong></center>
            <br>
            Click the <em>Change</em> button to access the library of available car layouts.
            <br><br>
            Because changing car layout also changes vehicle size and weight,
            you will likely need to adjust maximum wheel torque, suspension strength and
            vehicle center of mass offset to achieve the desired car physics behavior.
            <br><br>
            <center><strong>Fast rendering</strong></center>
            <br>
            If this option is checked, a faster rendering technique is used for the placeholder geometry.
            This will improve frame rate on slower systems, but it may reduce rendering quality.
            <br><br>
            <center><strong>Cast shadows</strong></center>
            <br>
            If this option is checked, the car layout will cast a volumetric shadow.
            This may affect frame rate on slower systems.
            <br><br>
            <center><strong>Refl. update rate</strong></center>
            <br>
            Set this parameter to any positive value (below 450.0) to make the placeholder
            geometry dynamically reflect the actual environment surrounding it. 
            <br><br>
            <center><strong>Hide car-body geometry</strong></center>
            <br>
            If this option is checked the car-body placeholder geometry will not be rendered, run-time.
            <br><br>
            <center><strong>Hide wheels geometry</strong></center>
            <br>
            If this option is checked the wheels' placeholder geometry will not be rendered run-time.
            <br><br>
            <center><strong>Controls</strong></center>
            <br>
            You can make the car interactive by checking the box next to one or more input controls
            (Throttle, Reverse, Brake, Turn Left/Right).
            <br><br>
            NOTE: you can allow the final users of your project to configure controls (eg to use a steering wheel) by
            adding a <a href="./ConfigureControls.htm">ConfigureControls</a> object to the project.
            <br><br>
            The <em>Delay</em> parameters allow you to set the <em>response time</em> for each control, in seconds (approximately). 
            <br><br>
            Also, keep in mind that input controls must be disabled (unchecked) if you want to control the car by manipulating its internal values,
            for example by using the <a href="./Script.htm">Script</a> object.
            See <em>internal values</em> table below for more.
            <br><br>
            <li><em>Max angle</em> determines the maximum turning angle for the front wheels.</li>
            <br><br>
            <li>If the <em>Working At Start</em> option is not checked, the car will only respond to input controls when the
            object is <em>started</em> by another object, like for example
            <a href="./EventOnInput.htm">EventOnInput</a>.</li>
            <br><br>
            <center><strong>Wheel parameters</strong></center>
            <br>
            A complete set of parameters is provided for front and rear wheels independently.
            <br><br>
            <li><em>Maximum axle torque</em> is the maximum angular force applied to the wheel. Keep in mind that the applied force is always
            maximum when throttle input controls is non-proportional (e.g., the input control is a computer keyboard key or joystick button).
            Proportional force is only used when the control is proprtional (like a joystick axis, or steering-wheel-device's pedal).
            for determines how quickly the car will reach its top speed. Actual speed depends on car masses, damping and other settings.</li>
            <br><br>
            <li><em>Max brake torque</em> is the maximum angular force applied to the wheel to stop it, when braking controls are used.</li>
            <br><br>
            <li><em>Max longitudal grip</em> is the maximum tire force applied along the wheel's rolling direction. Raising this value
            makes the tire less prone to spinning when starting and slipping when braking. It also makes the axle torque more effective,
            causing the car reach higher top speeds. See also <em>Longitudal tire force function</em>, below.</li>
            <br><br>
            <li><em>Max lateral grip</em> is the maximum tire force applied sideways. Raising this value
            makes the tire less prone to slipping when turning. See also <em>Lateral tire force function</em>, below.</li>
            <br><br>
            <li><em>Suspension spring</em> determines suspension force. Raising this value makes the suspension harder to compress.
            If <em>Suspension damping</em> isn't also raise, the suspension will become more bouncy.</li>
            <br><br>
            <li><em>Suspension damping</em> determines suspension ability to absorb bounces.</li>
            <br><br>
            <li><em>Suspension travel</em> is the maximum distance, in meters, the suspension can extend to.
            When the wheel isn't touching ground, the suspension will extend to the distance specified by this parameter.
            <br><br>
            <li><em>Suspension target position</em>, between 0 and 1.
            When this value is zero (default), the maximum suspension force is when the suspenson is fully compressed.
            When the value is 1, the maximum force is when the suspension is fully extended.
            <br><br>
            <center>
            <img src="./img/PCar01.jpg">
            </center>
            <br><br>
            When the suspension is compressed beyond the target position, it behaves more like a simple spring, rather than a
            vehicle suspension. As a result it produces some extra bouncing that can be used to simulate old times vehicles or
            faulty suspensions.</li>
            <br><br>

            <center><strong>Additional settings</strong></center>
            <br>
            <li><em>Max car speed</em>, in meters per second. When this parameter is non-zero, wheels torque is reduced progressively while the car
            approaches the specified speed. This can be used to approximately simulate real world cars that don't actually accelerate indefinately,
            due to drag and internal mechanical frictions.
            <br><br>
            Please note that the specified speed is theoretical (it assumes infinite axle torque and grip force).
            It means that, due to various factors, including default damping applied to car model's
            rigid-bodies, the simulated car may stop accelerating well before the specified speed.
            <br><br>
            Note: a more realistic way to simulate drag is by attachng an <a href="./Airfoil.htm">Airfoil</a> object to the car.
            <br><br>
            <li><em>Reverse torque factor</em> let's you reduce the maximum wheel toques when the car is in reverse. The reverse
            torque will be the same when this value is 1, half when this value is 0.5 and so on.</li>
            <br><br>
            <li><em>Center of mass' vertical offset</em>, in meters.
                For example, -0.7 means that the center of mass for the car will be 0.7 meters lower than the car-body model center.
                The lower the center of mass, the harder to flip the car on bends.
            <br><br>
                <strong>NOTE</strong>: setting the center of mass too low will make the car bend the opposite way, like a motorbike, on bends.
                This effect is useful when implementing motorbikes (you usually also alter the Car wheel X offset so that left and right wheel sets join together
                in the middle).</li>
            <br><br>
            <li><em>Crash damping</em> allows you to reduce car speed on collisions.
                The second value is the threshold speed (in meters per second) for the object hit by the car.
                If the object's speed is above the threshold, no damping is applied. You typically use this to prevent
                collisions with other cars or non-static scenery props from triggering crash damping.</li>
            <br><br>

            <center><strong>Longitudal/Lateral tire force function</strong></center>
            <br>
            As soon as a tire slips on the ground, a certain grip force is generated to simulate rubber friction.
            <br><br>
            The maximum amount of longitudal and lateral force can be adjusted primarily by using the <em>Max longitudal/lateral grip</em> parameters
            mentioned above (<em>Wheel parameters</em> section).
            <br><br>
            However, because real-world tires produce different amounts of grip force depending on how fast they slip,
            the PCar object includes, for a more realistic simulation, some extra parameters.
            <br><br>
            <center>
            <img src="./img/PCar02.jpg">
            </center>
            <br><br>
            The graph above is the amount of tire force (grip) produced, for a given slip velocity (in meters per second).
            <br><br>
            For real cars, experimental data shows that force reaches its maximum when slip speed is about 1 meter per second.
            It then progressively diminishes and stabilizes at a lower level, when slip reaches a certain, higher speed.
            <br><br>
            The <em>Extremum slip/force</em> parameters let you specify where, on the graph, the extremum point is (that is,
            at what slip speed, the tire will produce the specified force).
            <br><br>
            Note that slip speed is in meters per second.
            <br><br>
            Also note that when the specified tire force is 1, the amount of grip produced is the one you specified in the
            <em>Max longitudal grip</em> box (<em>Wheel parameters</em> section above), when force is 2, grip is twice the amount
            of grip specified and so on.
            <br><br>
            Similarly, the <em>Asymptote slip/force</em> parameters let you specify where, on the graph, the asymptote point is (that is,
            at what slip speed, the tire force will stabilize at the specified value).
            <br><br>
            Note that, due to tire rubber design and other factors, real-world longitudal and lateral grip may be described by different curves.
            For your simulated car you can therefore specify different tire force functions for longitudal and lateral slip.
            <br><br>
            NOTE: due to user interface limitations, you can only specify tire force functions for both front and rear wheels, on
            the PCar property dialog. This limitiation is not there when manipulating parameters by using scripting (see below).
            <br><br>

            <center><strong>Network IDs for controls / Player number</strong></center>
            <br>
            In a multiplayer game, when the project is running on the server, PCar objects that have controls sets to the same <em>Network ID</em> as
            EventOnInput objects in a project which is running on a connected client PC, will respond based on the remote user input.
            <br><br>
            So, for example, if you have a car game running on the server, and the controls of a PCar are associated with (have the same Network Id as)
            EventOnInput objects in a project running on a client, the client PC user will be able to control the PCar on the server.
            <br><br>
            IMPORTANT: the PCar controls you want to be controlled by a remote EventOnInput object must be disabled (un-ckecked) on the PCar property dialog.
            Simply setting a network Id for a control will give no results if the control is enabled (checked) on the PCar property dialog.
            <br><br>
            For more information about creating multiplayer projects with 3D Rad, please see
            the <a href="./EventOnInput.htm">EventOnInput help file</a> (<em>NETWORK</em> section).
            <br><br>

            <br><br>
            <center><strong>Other dialog controls</strong></center>
            <br>
            For information about the remaining controls, please <a href="./AllObjects.htm">click here</a>.
            <br><br><br>
            <center><strong>INTERNAL PARAMETERS</strong></center>
            <br><br>
            The following internal parameters can be accessed by using other objects like
            <a href="./EventOnValue.htm">EventOnValue</a> or <a href="./Script.htm">Script</a>:
            <br><br>
            <li>Turn left/right, between -1 and 1. Write only</li>
            <li>Throttle, between -1 and 1. Write only</li>
            <li>Brake, between 0 and 1. Write only</li>
            <li>Speed, in meters per second. Read only</li>
            <li>Maximum steering, in degrees. Read only</li>

            <br><br>
            The following internal parameters can be accessed by using the <a href="./Script.htm">Script</a> object.
            Please note that resetting the PCar object run-time (for example by calling the iObjectReset() script function)
            will not restore these parameters to their default values.
            <br><br>
            <li>Brakes state. Read only. This value is 1 when the car is using the brakes, zero otherwise.
                Note that cars controlled by the CarAI object may almost never brake, unless the
                <em>Brakes</em> and the <em>Driving carefulness</em> parameters on the CarAI
                object dialog are bigger than zero</li>
            <li>Throttle state. Read only. This value is 1 when car throttle is fully activated, zero when it is released and -1
                when the car is in full reverse. Intermediate states produce intermediate values.</li>
            <br><br>

            Almost all the remaining parameters present on the property dialog can be controlled run-time by using the iObjectParamSet()
            <a href="./Script_reference.htm">script function</a>.
            For an example of usage and a complete list of settings, please see the sample project called <em>PCarScriptedDemo.3dr</em>
            (in 3D Rad, press Ctrl+O to access available demo projects).
            <br><br>
         </p>
         </font>
         </div>
      </td>
      <td width="174"></td>
   </tr>

   <tr>
      <td width="26" bgcolor="#00002F"></td>
      <td width="112" bgcolor="#00002F"></td>
      <td width="24" bgcolor="#00002F"></td>
      <td width="698" colspan="3"><img src="./img/main_logo_bottom.jpg" width="598" height="103"></td>
   </tr>

</table>

</body>

</html>
